// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: services.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DocumentEmbedService_Embed_FullMethodName    = "/openrag.DocumentEmbedService/embed"
	DocumentEmbedService_Progress_FullMethodName = "/openrag.DocumentEmbedService/progress"
)

// DocumentEmbedServiceClient is the client API for DocumentEmbedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentEmbedServiceClient interface {
	Embed(ctx context.Context, in *DocumentEmbedRequest, opts ...grpc.CallOption) (DocumentEmbedService_EmbedClient, error)
	Progress(ctx context.Context, in *CallbaclRequest, opts ...grpc.CallOption) (DocumentEmbedService_ProgressClient, error)
}

type documentEmbedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentEmbedServiceClient(cc grpc.ClientConnInterface) DocumentEmbedServiceClient {
	return &documentEmbedServiceClient{cc}
}

func (c *documentEmbedServiceClient) Embed(ctx context.Context, in *DocumentEmbedRequest, opts ...grpc.CallOption) (DocumentEmbedService_EmbedClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentEmbedService_ServiceDesc.Streams[0], DocumentEmbedService_Embed_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &documentEmbedServiceEmbedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DocumentEmbedService_EmbedClient interface {
	Recv() (*DocumentEmbedResponse, error)
	grpc.ClientStream
}

type documentEmbedServiceEmbedClient struct {
	grpc.ClientStream
}

func (x *documentEmbedServiceEmbedClient) Recv() (*DocumentEmbedResponse, error) {
	m := new(DocumentEmbedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *documentEmbedServiceClient) Progress(ctx context.Context, in *CallbaclRequest, opts ...grpc.CallOption) (DocumentEmbedService_ProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentEmbedService_ServiceDesc.Streams[1], DocumentEmbedService_Progress_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &documentEmbedServiceProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DocumentEmbedService_ProgressClient interface {
	Recv() (*CallbackResponse, error)
	grpc.ClientStream
}

type documentEmbedServiceProgressClient struct {
	grpc.ClientStream
}

func (x *documentEmbedServiceProgressClient) Recv() (*CallbackResponse, error) {
	m := new(CallbackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocumentEmbedServiceServer is the server API for DocumentEmbedService service.
// All implementations must embed UnimplementedDocumentEmbedServiceServer
// for forward compatibility
type DocumentEmbedServiceServer interface {
	Embed(*DocumentEmbedRequest, DocumentEmbedService_EmbedServer) error
	Progress(*CallbaclRequest, DocumentEmbedService_ProgressServer) error
	mustEmbedUnimplementedDocumentEmbedServiceServer()
}

// UnimplementedDocumentEmbedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentEmbedServiceServer struct {
}

func (UnimplementedDocumentEmbedServiceServer) Embed(*DocumentEmbedRequest, DocumentEmbedService_EmbedServer) error {
	return status.Errorf(codes.Unimplemented, "method Embed not implemented")
}
func (UnimplementedDocumentEmbedServiceServer) Progress(*CallbaclRequest, DocumentEmbedService_ProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedDocumentEmbedServiceServer) mustEmbedUnimplementedDocumentEmbedServiceServer() {}

// UnsafeDocumentEmbedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentEmbedServiceServer will
// result in compilation errors.
type UnsafeDocumentEmbedServiceServer interface {
	mustEmbedUnimplementedDocumentEmbedServiceServer()
}

func RegisterDocumentEmbedServiceServer(s grpc.ServiceRegistrar, srv DocumentEmbedServiceServer) {
	s.RegisterService(&DocumentEmbedService_ServiceDesc, srv)
}

func _DocumentEmbedService_Embed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DocumentEmbedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocumentEmbedServiceServer).Embed(m, &documentEmbedServiceEmbedServer{stream})
}

type DocumentEmbedService_EmbedServer interface {
	Send(*DocumentEmbedResponse) error
	grpc.ServerStream
}

type documentEmbedServiceEmbedServer struct {
	grpc.ServerStream
}

func (x *documentEmbedServiceEmbedServer) Send(m *DocumentEmbedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DocumentEmbedService_Progress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallbaclRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocumentEmbedServiceServer).Progress(m, &documentEmbedServiceProgressServer{stream})
}

type DocumentEmbedService_ProgressServer interface {
	Send(*CallbackResponse) error
	grpc.ServerStream
}

type documentEmbedServiceProgressServer struct {
	grpc.ServerStream
}

func (x *documentEmbedServiceProgressServer) Send(m *CallbackResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DocumentEmbedService_ServiceDesc is the grpc.ServiceDesc for DocumentEmbedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentEmbedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openrag.DocumentEmbedService",
	HandlerType: (*DocumentEmbedServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "embed",
			Handler:       _DocumentEmbedService_Embed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "progress",
			Handler:       _DocumentEmbedService_Progress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

const (
	CallbackService_Progress_FullMethodName = "/openrag.CallbackService/progress"
)

// CallbackServiceClient is the client API for CallbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbackServiceClient interface {
	Progress(ctx context.Context, in *CallbaclRequest, opts ...grpc.CallOption) (CallbackService_ProgressClient, error)
}

type callbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackServiceClient(cc grpc.ClientConnInterface) CallbackServiceClient {
	return &callbackServiceClient{cc}
}

func (c *callbackServiceClient) Progress(ctx context.Context, in *CallbaclRequest, opts ...grpc.CallOption) (CallbackService_ProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &CallbackService_ServiceDesc.Streams[0], CallbackService_Progress_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &callbackServiceProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CallbackService_ProgressClient interface {
	Recv() (*CallbackResponse, error)
	grpc.ClientStream
}

type callbackServiceProgressClient struct {
	grpc.ClientStream
}

func (x *callbackServiceProgressClient) Recv() (*CallbackResponse, error) {
	m := new(CallbackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CallbackServiceServer is the server API for CallbackService service.
// All implementations must embed UnimplementedCallbackServiceServer
// for forward compatibility
type CallbackServiceServer interface {
	Progress(*CallbaclRequest, CallbackService_ProgressServer) error
	mustEmbedUnimplementedCallbackServiceServer()
}

// UnimplementedCallbackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCallbackServiceServer struct {
}

func (UnimplementedCallbackServiceServer) Progress(*CallbaclRequest, CallbackService_ProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedCallbackServiceServer) mustEmbedUnimplementedCallbackServiceServer() {}

// UnsafeCallbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbackServiceServer will
// result in compilation errors.
type UnsafeCallbackServiceServer interface {
	mustEmbedUnimplementedCallbackServiceServer()
}

func RegisterCallbackServiceServer(s grpc.ServiceRegistrar, srv CallbackServiceServer) {
	s.RegisterService(&CallbackService_ServiceDesc, srv)
}

func _CallbackService_Progress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallbaclRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CallbackServiceServer).Progress(m, &callbackServiceProgressServer{stream})
}

type CallbackService_ProgressServer interface {
	Send(*CallbackResponse) error
	grpc.ServerStream
}

type callbackServiceProgressServer struct {
	grpc.ServerStream
}

func (x *callbackServiceProgressServer) Send(m *CallbackResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CallbackService_ServiceDesc is the grpc.ServiceDesc for CallbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openrag.CallbackService",
	HandlerType: (*CallbackServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "progress",
			Handler:       _CallbackService_Progress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}
